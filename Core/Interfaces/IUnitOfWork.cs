namespace Core.Interfaces.Repositories;

public interface IUnitOfWork : IDisposable, IAsyncDisposable 
{
    public IGenericRepository<T> Repository<T>() where T : class;
    public Task<int> CompleteAsync();
}

/*
//IUnitOfWork  إدارة جميع العمليات التي تؤثر على البيانات في قاعدة البيانات كوحدة عمل واحدة
//إدارة معاملات قاعدة البيانات: يقوم هذا النمط بلف العمليات التي تؤثر على قواعد البيانات ضمن معاملة واحدة 
//(Transaction). هذا يضمن أن جميع العمليات (مثل إضافة كيانات جديدة، تحديث أو حذف كيانات) 
تنجح كوحدة عمل واحدة أو تفشل كوحدة واحدة.

تقليل عدد العمليات المكررة: يجمع Unit of Work العمليات التي تتم على البيانات في دورة واحدة،
مما يقلل من عدد المعاملات الفردية التي تحدث في قاعدة البيانات
 
 isposable: مشابه لـ IDisposable، لكنه يُستخدم للتعامل مع
العمليات التي تحتاج إلى التفريغ بطريقة غير متزامنة 
مهم لتحسين أداء التطبيقات خاصة في عمليات الإدخال والإخراج
(I/O)مثل التفاعل مع قاعدة البيانات. 
 
Repository<T>(): تُعيد كائن من النوع IGenericRepository<T>.
هذه الطريقة توفر لك الوصول إلى المستودع (repository) الخاص بكيان معين.

هذه الطريقة مسؤولة عن حفظ التغييرات التي تم إجراؤها في جميع المستودعات إلى قاعدة البيانات كوحدة عمل واحدة.
CompleteAsync(): تقوم بحفظ جميع العمليات المتعلقة بـ Add, Update, Delete للكيانات التي تمت معالجتها خلال وحدة العمل.
 
 */